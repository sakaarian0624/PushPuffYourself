{
    "0":"タイトル",
    "1":"・プロトコル,親クラスの宣言には:を使います",
    "2":"・引数はラベル 引数名:型,...と宣言します",
    "3":"・if let文は中身がnilかどうか判定します",
    "4":"・importはクラス宣言より前に書きます",
    "5":"・Swiftの条件分岐では()を使いません",
    "6":"・for 変数名 in 値...値、または配列名で繰り返し構文を使えます",
    "7":"・switch 変数名{case 値:命令..}でswitch文を使います",
    "8":"・while 条件式{}で条件がfalseになるまで命令を繰り返します",
    "9":"・命令文は{}で囲います",
    "10":"・Swiftでは配列も辞書も[]で囲います",
    "11":"・関数名(ラベル:値,..)で関数を呼び出します",
    "12":"・_を引数のラベルに指定すると関数(値)で関数を呼び出せます",
    "13":"・アップキャスティングは常に成功します",
    "14":"・var 変数名:親クラス = 子インスタンスでアップキャスティングをします",
    "15":"・var 変数名:子クラス = 親インスタンス as! 子クラスでダウンキャスティングします",
    "16":"・継承関係にないクラスでキャスティングを行うとエラーになります",
    "17":"・デリゲートとなるクラスは必ずプロトコルに批准している必要があります",
    "18":"・インスタンス.delegete = クラス()でデリゲートを呼び出します",
    "19":"・delegateで他のクラスに処理をお願いできます",
    "20":"・インスタンス.delegate = selfで処理を自クラス(インスタンス)に戻します",
    "21":"・nilは何もないことを意味しています、ラテン語nihilが由来です",
    "22":"・変数型名に?をつければオプショナル型を宣言できます",
    "23":"・オプショナル型に!を付けることでnil以外の値を取り出せます",
    "24":"・変数宣言で!を付けるとその後も!なしで変数を取り出せます",
    "25":"・複数のデータを扱うには配列か辞書を使います",
    "26":"・配列はfor文の繰り返し範囲として宣言できます",
    "27":"・辞書にはキーを自由に設定できます",
    "28":"・append(),remove()で配列に要素の追加と削除ができます",
    "29":"・UI部品はクラスをインスタンス化して使います",
    "30":"・インスタンス化したUI部品にプロパティを設定できます",
    "31":"・型 変数名:データ型名でプロパティ宣言をできます",
    "32":"・self.プロパティ名で自身のプロパティを表します",
    "33":"・-> 戻り値の型・・・return 戻り値 で戻り値を設定します",
    "34":"・引数名の前にラベルを宣言することができます",
    "35":"・overrideは親クラスのメソッドを子クラスで上書きします",
    "36":"・super.メソッド名で親クラスのメソッドを実行できます",
    "37":"・for <定数名> in 範囲{}で繰り返し処理を行えます",
    "38":"・if <条件>{}で条件分岐を行えます",
    "39":"・switch文ではcaseとdeafaultを使います",
    "40":"・while文では条件がfalseになるまで繰り返します",
    "41":"・enum 列挙体名 {case...}で列挙体を定義します",
    "42":"・列挙体名.値名で値を取り出します",
    "43":"・列挙体を使用することで不自然な値が入ることがなくなりバグを防ぎます",
    "44":"・列挙体では独自の型を作っていると言えます",
    "45":"・class 子クラス:親クラスで継承を行います",
    "46":"・継承することで親クラスのメソッドとプロパティが引き継がれます",
    "47":"・親クラスは一つしか指定できません",
    "48":"・子クラスをさらに引き継ぐことも可能です",
    "49":"・イニシャライザは引数を受け取ってクラスのインスタンスを生成します",
    "50":"・インスタンス生成に引数が必要ない場合、イニシャライザも必要ありません",
    "51":"・イニシャライザはクラスのインスタンス化の際に自動で呼び出されます",
    "52":"・イニシャライザは init(引数){文}をクラスの中に書きます",
    "53":"・() -> void のように、関数を型として指定できます",
    "54":"・クロージャは {(引数) -> <型> in 文}と書きます",
    "55":"・クロージャは引数として指定できます",
    "56":"・クロージャに引数、戻り値がない場合は{}で命令文を囲むだけです",
    "57":"・class func(){}で型メソッドを宣言できます",
    "58":"・クラス名.メソッド名()で型メソッドを実行します",
    "59":"・型メソッドではプロパティを扱えません",
    "60":"・static func(){}で型メソッドを宣言する場合もあります",
    "61":"・プロトコルにはメソッドの中身は書きません",
    "62":"・プロトコルはprptocol<プロトコル名>{}で宣言できます",
    "63":"・継承の方法とプロトコルの批准方法は同じです(class <クラス名>:〜)",
    "64":"・プロトコルは親クラスがある場合、親クラス名の後に書きます"
}
