{
    "0":"JAVA",
    "1":"・ファイルを少しずつ読み込んでいくことをストリームと言います",
    "2":"・java.netパッケージを使えばWebサイトと連携できます",
    "3":"・java.sqlパッケージを使えばデータベースと連携できます",
    "4":"・JAVAはandroidアプリ開発にも用いられています",
    "5":"・try文が失敗するとcatch文が起動します",
    "6":"・Exception系例外が発生する可能性がある命令はtry-catch文で囲まないとエラーになります",
    "7":"・IOExceptionなどの例外クラスには様々なものがあります",
    "8":"・throw(IOException e)ではeにIOExceptionインスタンスを代入しています",
    "9":"・全てのクラスの祖先はjava.lang.Objectクラスです",
    "10":"・全てのインスタンスはオブジェクト型に入れることができます",
    "11":"・toStringメソッドはオブジェクトクラスに定義されています",
    "12":"・インスタンス1.equals(インスタンス2)でい二つのインスタンスが等価であるか確認できます",
    "13":"・親クラスの型に子クラスのインスタンスを入れることができます",
    "14":"・クラスX　変数名 = (クラスX) 親クラスに入れたインスタンスX で型を変更できます",
    "15":"・インスタンス名 instanceof 型名でインスタンスが型に入るか確認できます",
    "16":"・インスタンスを親クラス型で捉えることで同親クラスを持つインスタンスと配列を作れます",
    "17":"・アクセス修飾子 abstruct class クラス名()で抽象クラスを宣言します",
    "18":"・抽象クラスはインスタンス化ができません",
    "19":"・抽象クラスの抽象メソッドは必ずオーバーライドされる必要があります",
    "20":"・interfaceはフィールドを持ちません",
    "21":"・int型、byte型、long型、short型には整数が入ります",
    "22":"・double型,float型には小数が入ります",
    "23":"・boolean型には真偽値が入ります",
    "24":"・char型,String型には文字列が入ります",
    "25":"・=は左辺に右辺を代入します",
    "26":"・キャスト演算子 (型名)式 で強制的に型変換できます",
    "27":"・Integer.parseInt()で文字列を数値に変換できます",
    "28":"・new java.util.Random().nextInt()で乱数を発生させられます",
    "29":"・String型の==はequalsです!気をつけましょう",
    "30":"・JAVAではswitch文にcaseごとにbreak;を書かなくてはなりません",
    "31":"・for文はfor(int i=0; i<10; i++){}と書きます",
    "32":"・while文は条件式を評価してから命令を実行します、do{}while()文は逆です",
    "33":"・配列は0からです!気をつけましょう",
    "34":"・for(int i=0; i<配列.length; i++){}で配列の数だけ繰り返しができます",
    "35":"・配列の変数宣言時には型名[]と書きます",
    "36":"・for(int 適当な変数名:配列名){}でも配列の値を変数名に入れて繰り返しができます",
    "37":"・メソッドのvoidは戻り値がなく、型名がないことを意味しています",
    "38":"・引数の種類や数の違いで呼び出されるメソッドが分岐することをオーバーロードと言います",
    "39":"・mainメソッドにはString型配列argsが引数として指定されています",
    "40":"・return文実行と同時にメソッドは終了します",
    "41":"・package定義はソースコードの先頭です",
    "42":"・package.class.method()の形でコードを実行します",
    "43":"・import package.classとすればclass表記時にpackageを省略できます",
    "44":"・クラスを分けて部品化したプログラミングをオブジェクト指向といいます",
    "45":"・同クラス内のフィールドはthis.プロパティ名で指定します",
    "46":"・フィールドには初期値を設定することもしないこともできます",
    "47":"・フィールド、メソッドは最初以外の単語を大文字にすることが望ましいとされています",
    "48":"・フィールドは名詞、メソッドは動詞を名前にすることが望ましいとされています",
    "49":"・クラス名　変数名 = new クラス名でインスタンスを生成します",
    "50":"・変数名.フィールド名=でフィールドを定義します",
    "51":"・変数名.メソッド名でメソッドを実行します",
    "52":"・staticが付いたクラス、フィールド、メソッドはインスタンス化せずに呼び出せます",
    "53":"・コンストラクタはクラス名()で定義するメソッドでインスタンス化時に自動で呼び出されます",
    "54":"・コンストラクタで初期値を定義できます",
    "55":"・オーバーロードを使い、コンストラクタを引数あり、なしで処理を分けることができます",
    "56":"・コンストラクタからthis(引数)でクラス内の別のコンストラクタを呼び出せます",
    "57":"・カプセル化でメンバに対するアクセス制限ができます",
    "58":"・カプセル化されたフィールド値へはgetterメソッドでアクセスします",
    "59":"・カプセル化されたフィールド値を変更する場合setterメソッドを使います",
    "60":"・クラスにpublicを付けないと同一パッケージからしかアクセスできなくなります",
    "61":"・クラス名の次に extends 親クラス名と記述すれば継承が行えます",
    "62":"・親クラスのメンバを子クラスで上書きできます(オーバーライド)",
    "63":"・final class クラス名と書かれたクラスは親クラスになれません",
    "64":"・super()で親クラスのコンストラクタを呼び出します"
}
